diff --git a/core/java/android/app/ActivityThread.java b/core/java/android/app/ActivityThread.java
index 14a622a68fad..6a6a5af6f17a 100644
--- a/core/java/android/app/ActivityThread.java
+++ b/core/java/android/app/ActivityThread.java
@@ -182,6 +182,10 @@ import java.util.Map;
 import java.util.Objects;
 import java.util.TimeZone;
 import java.util.concurrent.Executor;
+import java.lang.reflect.Constructor;
+import java.lang.reflect.Field;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
 
 final class RemoteServiceException extends AndroidRuntimeException {
     public RemoteServiceException(String msg) {
@@ -2844,6 +2848,7 @@ public final class ActivityThread extends ClientTransactionHandler {
 
     /**  Core implementation of activity launch. */
     private Activity performLaunchActivity(ActivityClientRecord r, Intent customIntent) {
+        Log.e(TAG, "go into performLaunchActivity");
         ActivityInfo aInfo = r.activityInfo;
         if (r.packageInfo == null) {
             r.packageInfo = getPackageInfo(aInfo.applicationInfo, r.compatInfo,
@@ -2951,10 +2956,161 @@ public final class ActivityThread extends ClientTransactionHandler {
                     + ": " + e.toString(), e);
             }
         }
-
+        Log.e(TAG, "app name:" + r.packageInfo.getPackageName());
+        if (r.packageInfo.getPackageName().equals("com.example.jltxgcy.arttest")) {
+            ActivityThread.fartthread();
+        }
         return activity;
     }
 
+    public static ClassLoader getClassloader() {
+        Object currentActivityThread = invokeStaticMethod("android.app.ActivityThread", "currentActivityThread", new Class[]{}, new Object[]{});
+        Object mBoundApplication = getFieldOjbect("android.app.ActivityThread", currentActivityThread, "mBoundApplication");
+        return ((Application) getFieldOjbect("android.app.LoadedApk", getFieldOjbect("android.app.ActivityThread$AppBindData", mBoundApplication, "info"), "mApplication")).getClassLoader();
+    }
+
+    public static Object invokeStaticMethod(String class_name, String method_name, Class[] pareTyple, Object[] pareVaules) {
+        try {
+            return Class.forName(class_name).getMethod(method_name, pareTyple).invoke(null, pareVaules);
+        } catch (IllegalAccessException e) {
+            e.printStackTrace();
+        } catch (InvocationTargetException e) {
+            e.printStackTrace();
+        } catch (NoSuchMethodException e) {
+            e.printStackTrace();
+        } catch (ClassNotFoundException e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+
+    public static Object getFieldOjbect(String class_name, Object obj, String fieldName) {
+        try {
+            Class obj_class = Class.forName(class_name);
+            Field field = obj_class.getDeclaredField(fieldName);
+            field.setAccessible(true);
+            return field.get(obj);
+        } catch (ClassNotFoundException e) {
+            e.printStackTrace();
+        } catch (NoSuchFieldException e) {
+            e.printStackTrace();
+        } catch (IllegalAccessException e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+
+    public static Field getClassField(ClassLoader class_loader, String class_name, String fieldName) {
+        try {
+            Field field = class_loader.loadClass(class_name).getDeclaredField(fieldName);
+            field.setAccessible(true);
+            return field;
+        } catch (NoSuchFieldException e) {
+            e.printStackTrace();
+        } catch (ClassNotFoundException e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+
+    public static Object getClassFieldObject(ClassLoader class_loader, String class_name, Object obj, String fieldName) {
+        try {
+            Field field = class_loader.loadClass(class_name).getDeclaredField(fieldName);
+            field.setAccessible(true);
+            return field.get(obj);
+        } catch (NoSuchFieldException e) {
+            e.printStackTrace();
+        } catch (ClassNotFoundException e) {
+            e.printStackTrace();
+        } catch (IllegalAccessException e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+
+    public static void fart() {
+        try {
+            ClassLoader class_loader = getClassloader();
+            Method[] md = class_loader.loadClass("dalvik.system.DexFile").getDeclaredMethods();
+            Method getClassNameListMethod = null;
+            Method dumpMethodCodeMethod = null;
+            int mdCount = md.length;
+            for (int i = 0; i < mdCount; i++) {
+                if (md[i].getName().equals("getClassNameList")) {
+                    getClassNameListMethod = md[i];
+                    md[i].setAccessible(true);
+                } else if (md[i].getName().equals("dumpMethodCode")) {
+                    dumpMethodCodeMethod = md[i];
+                    md[i].setAccessible(true);
+                }
+            }
+
+            Object[] dexElementsObjs = (Object[]) getFieldOjbect("dalvik.system.DexPathList", getFieldOjbect("dalvik.system.BaseDexClassLoader", class_loader, "pathList"), "dexElements");
+            Field dexFileField = getClassField(class_loader, "dalvik.system.DexPathList$Element", "dexFile");
+            for (int i = 0; i < dexElementsObjs.length; i++) {
+                Object dexFileObj = dexFileField.get(dexElementsObjs[i]);
+                Object cookObj = getClassFieldObject(class_loader, "dalvik.system.DexFile", dexFileObj, "mCookie");
+                String[] classNames = (String[]) getClassNameListMethod.invoke(dexFileObj, new Object[]{cookObj});
+                for (int j = 0; j < classNames.length; j++) {
+                    Log.e(TAG, "fart classNames:" + classNames[j]);
+                    loadClassAndInvoke(class_loader, classNames[j], dumpMethodCodeMethod);
+                }
+            }
+        } catch (ClassNotFoundException e) {
+            Log.e(TAG, "fart ClassNotFoundException" + e.getMessage());
+            e.printStackTrace();
+        } catch (IllegalAccessException e) {
+            Log.e(TAG, "fart IllegalAccessException" + e.getMessage());
+            e.printStackTrace();
+        } catch (InvocationTargetException e) {
+            Log.e(TAG, "fart InvocationTargetException" + e.getMessage());
+            e.printStackTrace();
+        }
+
+    }
+
+    public static void loadClassAndInvoke(ClassLoader class_loader, String className, Method dumpMethodCodeMethod) {
+        try {
+            Class class1 = class_loader.loadClass(className);
+            Constructor[] constructors = class1.getDeclaredConstructors();
+            for (int i = 0; i < constructors.length; i++) {
+                dumpMethodCodeMethod.invoke(null, new Object[]{constructors[i]});
+            }
+
+            Method[] methods = class1.getDeclaredMethods();
+            for (int i = 0; i < methods.length; i++) {
+                dumpMethodCodeMethod.invoke(null, new Object[]{methods[i]});
+            }
+            Log.e(TAG, "className:" + className + ",constructors length:" + constructors.length + ",method length:" + methods.length);
+        } catch (ClassNotFoundException e) {
+            Log.e(TAG, "fart ClassNotFoundException" + e.getMessage());
+            e.printStackTrace();
+        } catch (IllegalAccessException e) {
+            Log.e(TAG, "fart IllegalAccessException" + e.getMessage());
+            e.printStackTrace();
+        } catch (InvocationTargetException e) {
+            Log.e(TAG, "fart InvocationTargetException" + e.getMessage());
+            e.printStackTrace();
+        }
+        return;
+    }
+
+    public static void fartthread() {
+        (new Thread(new Runnable() {
+            public void run() {
+                try {
+                    Log.e("ActivityThread", "start sleep......");
+                    Thread.sleep(10000L);
+                } catch (InterruptedException interruptedException) {
+                    interruptedException.printStackTrace();
+                }
+                Log.e("ActivityThread", "sleep over and start fart");
+                ActivityThread.fart();
+                Log.e("ActivityThread", "fart run over");
+            }
+        })).start();
+    }
+
     @Override
     public void handleStartActivity(ActivityClientRecord r,
             PendingTransactionActions pendingActions) {
@@ -5583,6 +5739,7 @@ public final class ActivityThread extends ClientTransactionHandler {
     }
 
     private void handleBindApplication(AppBindData data) {
+        Log.e(TAG, "go into handleBindApplication");
         // Register the UI Thread as a sensitive thread to the runtime.
         VMRuntime.registerSensitiveThread();
         if (data.trackAllocation) {
